using System;
using System.Collections.Generic;
using System.Text;
using BankApp.Data_Layer;
using BankApp.Utility;
using BankApp.Exceptions;
namespace BankApp.Business
{
    internal class Branch
    {
        /// <summary>
        /// List of all the bank accounts that are created in a branch
        /// </summary>
        public static List<BankAccount> BankAccounts = new List<BankAccount>();
        /// <summary>
        /// List of all the customers that own a bank account in a branch
        /// </summary>
        public static List<Customer> Customers = new List<Customer>();
        public Constants Constant = new Constants();
        public string BranchId { get; set; }//to uniquely identified a branch, generated by the HeadOffice


        /// <summary>
        /// Creates a bank account with inputs- PAN number, Type and amount and displays the account number alloted
        /// </summary>
        /// <param name="panNumber"></param>
        /// <param name="type"></param>
        /// <param name="amount"></param>
        public void CreateBankAcccount(string panNumber, string type, double amount)
        {
            CreateAccount BankAccount = new CreateAccount();
            BankAccount.CreateBankAcccount(panNumber, type, amount);
        }

        /// <summary>
        /// returns the customer with  matching pan number
        /// </summary>
        /// <param name="panNumber"></param>
        /// <returns>Customer</returns>
        public Customer GetCustomerByPan(string panNumber)
        {


            if (!Customers.Exists(customer => customer.PanNumber == panNumber))
            {
                throw (new CustomerNotFound(Constant.NoCustomer));
            }
            else
            {
                return Customers.Find(customer => customer.PanNumber == panNumber);
            }
        }
        /// <summary>
        /// Returns the BankAccount by account number
        /// </summary>
        /// <param name="accountNumber"></param>
        /// <returns>BankAccount</returns>
        public BankAccount GetAccountByAccountNumber(string accountNumber)
        {
            if (!BankAccounts.Exists(account => account.AccountNumber == accountNumber))
            {
                throw (new AccountNotFound(Constant.NoAccount));
            }
            else
            {
                return BankAccounts.Find(account => account.AccountNumber == accountNumber);
            }
        }
        

    }
}

